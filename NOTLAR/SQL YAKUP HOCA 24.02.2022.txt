############################################################### 24.02.2022 SQL - YAKUP HOCA ################################################################################

--SQL SORGU ÇEŞİTLERİ--

select *from( select Employees.EmployeeID,Employees.FirstName,Employees.LastName,COUNT(*) as 'qty' from Employees
inner join Orders on Employees.EmployeeID=Orders.EmployeeID group by Employees.EmployeeID,Employees.FirstName,Employees.LastName) tbl where tbl.qty>100

--group bydan sonra where kullanılmaz having kullanılır
--where kullanmak için select sorgusu içine tbl şeklinde tablo oluşturarak çekebiliriz

select Employees.EmployeeID,FirstName,LastName,Orders.* from Employees inner join Orders on Employees.EmployeeID=Orders.OrderID
--ordersın hepsini getirdi

Select * from Employees 
order by TitleOfCourtesy


Select TitleOfCourtesy, count(*) as 'Qty' from Employees
Group By TitleOfCourtesy

Select Employees.EmployeeID,
Employees.FirstName,
Employees.LastName,
Orders.*
from Employees
INNER JOIN Orders ON Employees.EmployeeID=Orders.EmployeeID
WHERE Employees.EmployeeID=1



Select Employees.EmployeeID,
Employees.FirstName,
Employees.LastName,
COUNT(*) as 'Qty'
from Employees
INNER JOIN Orders ON Employees.EmployeeID=Orders.EmployeeID
GROUP BY Employees.EmployeeID,Employees.FirstName,Employees.LastName
Having Count(*)>100


select * from (
Select Employees.EmployeeID,
Employees.FirstName,
Employees.LastName,
COUNT(*) as 'Qty'
from Employees
INNER JOIN Orders ON Employees.EmployeeID=Orders.EmployeeID
GROUP BY Employees.EmployeeID,Employees.FirstName,Employees.LastName
) tbl
where tbl.Qty>100


Select Employees.EmployeeID,
Employees.FirstName,
Employees.LastName,
COUNT(*) as 'Qty'
from Employees
INNER JOIN Orders ON Employees.EmployeeID=Orders.EmployeeID
where 100<(Select count(*) from Orders o WHERE o.EmployeeID=Employees.EmployeeID )
GROUP BY Employees.EmployeeID,Employees.FirstName,Employees.LastName



Select * from 
Products
LEFT JOIN [Order Details] ON [Order Details].ProductID=Products.ProductID
where ProductName='Elma'


Use StudentDb;

Select 
Users.*,
Faculties.Name,
UserInformations.FirstName,
UserInformations.LastName,
UserInformations.IdentificationNumber as 'Tc',
IdentificationNumbers.IdentificationNumber,
Students.StudentNumber,
Students.Lesson,
Teachers.CardNumber
from Users
INNER JOIN UserInformations ON Users.Id=UserInformations.UserId
INNER JOIN IdentificationNumbers ON UserInformations.IdentificationNumber=IdentificationNumbers.IdentificationNumber
LEFT JOIN Teachers ON Users.Id=Teachers.UserId
LEFT JOIN Students ON Users.Id=Students.UserId
INNER JOIN	UserFaculities ON Users.Id=UserFaculities.UserId
INNER JOIN	Faculties ON UserFaculities.FacultyId=Faculties.Id



Select 
Books.*,
Poets.FullName,
Categories.Name
from Books
INNER JOIN PoetBooks ON Books.Id=PoetBooks.BookId
INNER JOIN Poets ON PoetBooks.PoetId=Poets.Id
INNER JOIN Categories ON Books.CategoryId=Categories.Id

############################################################### 25.02.2022 ################################################################################

--NORMALIZASYON
-validation rule doğrulama belli bir zorunluluk getirme bu bilgi yoksa kullanıcıyı ekleme gibi

*Normalizasyon Kuralları
1-hiçbir özellik taşıyan kolon tekrar etmemeli 
2-bir kolon sadece bir özellik için kullanılmalı
3-tekrar eden satırlar normalizasyon kurallarını çiğner
4-bir değer boş kalma ihtimaline sahipse tabledan ayrılıp birebir bağ ile yeni bir tabloda oluşturulmalıdır
5-bir değer başka bir değer ile çoğul bağ içeriyorsa;
 1-bir kategorinin birden çok kitabı olabilir, bir kitabın sadece bir kategorisi var ise birden çoğa(one to many)
 2-bir kitabın birden çok şairi,bir şairin de birden çok kitabı var ise çoktan çoğa(many to many) bağ oluşturulmalıdır
 3-bir kullanıcının bilgileri ana tablodan ayrılırken bilgiler tekrar etmiyor ise birden bire(one to one) bağ oluşturulur
NOT=bir tablo 3 kolona sahipse az, 4 kolona sahipse çok kolona sahip olmuş olur
kolon sayısı arttıkça görüntüleme süresi artar o yüzden olabildiğince az veri kullanılmalıdır
parça parça bölüp her tabloda aynı olacak veriyi, tekrar etmesin diye tek tabloda kullanılır id ile çekeriz.


*ÖDEV
üniversitenin içerisinde birden çok kütüphane olacak //kütüphane id ve isimleri
kütüphaneler için tablo oluşturulacak
kütüphanede birden çok kitap yer alabilir aynı şekilde bir kitap birden çok kütüphanede yer alabilir//kitap table ı ve hangi kütüphanede olduğu
kişiler kütüphaneden kitap alacak
alınan kitaba ait bilgileri depolayacağız kullanıcının istediği
hangi kitabı
hangi kütüphaneden
kim tarafından 
ne zaman alındı ve ne zaman teslim edildiği bilgileri isteniyor..

*transactionlar iki veya daha fazla işlemin durumunu kontrol edip işlemlerin herhangi birinde hata olması durumunda hiçbir işlem yapmadan 
sistemi koruyan bir özelliktir.
bakiyelerde miktara 00 koymak virgül veya nokta eklemek yerine daha kullanışlıdır.
rollback geri dön demek kayıt calıstırırken yapılan islemlerde hata varsa geri dönüp islemi geri al kaydetme
try islemi yaptırmaya calısıyor catch hata varsa yakalıyor


*stored procedure
identity değerini korumak için önemlidir.

*sql injection
select*from Users
where Users.Username='' or 'x'='x' --busra' and Password='123'
hepsini listeledi

select*from Users
where Users.Username='' or 'x'='x';Drop database Northwind; --databasei tamamen sildi

select*from Users
where Users.Username='' or 'x'='x';Drop database Northwind; select Table_Name from INFORMATION_SCHEMA.TABLES


*katmanlımimari
business-- yapılan işlemler buraya yazılır kontrol
dataaccess-- sadece veri tabanı işlemleri yazılır kontrol hiçbir zaman söz konusu değildir
core-- ortak haberleşme katmandır. bütün katmanların ortak nesnelerini buraya yazarız, sistemle bağı olmayan ama sistemde kullanılan kodlar buradadır
hiçbir zaman iş yapılmaz.erişim belirteci olarak kullanılır
entegraions-- core katmanı hariç hiçbir yerden data ya da tetikleme almaz. 
entity--modellemelerin yapıldığı yerdir. sadece burası dağıtıcıdır. sadece core katmanından referans alır
api-- isteğin oluşturulduğu veya işlem sırasının belirlendiği yerdir. sadece business ve entity katmanına erişimi vardır


*cache caching, 1 defa çalıştıktan sonra tetiklenen veri ön bellekte tutulur
data her daim güncel oluyor





