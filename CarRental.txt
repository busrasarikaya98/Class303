****************************** CAR RENTAL PROJESI ****************************************
1)invidual account projesinde appsetting.jsondaki bağlantı stringini ve program.cs connection stringibi kendi projeye e ekledik
2)nuget paketlerini yükledik
3)modelsta deneme sınıfına key attribute ve proplar koyduk
4)projectte propertieste nullable disable yaparız .net6 özelliği
5)migration eklemeleri database için
6)controller ekledik framework ile; model class ve data seçtik ref tik i geri çektik ve layoutunu ekleyip controllerı olusturduk..
7)denemes linkinde laayoutuna renderbody() ekledik.
8)hazır template aldık themeforest royal cars- https://themewagon.com/ -,nulled.cx
9)hazır templatei wwwroota attık istediğimiz sayfayı layouta atıp parçaladık
10)parçalama yaparken razor görünümü ile yeni layout açtık bunlara verdiğimiz isimleri layout içinde <partial name,= ile yönlendirdik.
11)layout linki verdiğimiz sayfa layoutu görerek açar
12)Car cs ini açtık içine özelliklerini verdik brand id gibi özellikleri hataya yer vermemek için ikinci bir tablo ile göstereceğiz
Yani ikinci bir sınıf açılacak...
13)fake datayı dbye attık
14)Kullanıcı Girişi için kayıt ol giriş yap ve  şifremi unuttum modelleri ile hesap controllerlarını oluşturduk.
15)hukum ve kosulları googledan alıp yönlendirme yaptık butonda
16)hesap cont.da kayıt ol metotlarında http post kullanırız bizden servere gidenler postttur
view butondan metottan sonra gösterilen yerdir -id frontent tarafında name backend tarafında kullanılır
17)kayit.cste form controllerlarda method a post vermeliyiz yoksa controllerlardaki method oluşmaz
18)user kayıt için user.cs oluşturduk burada kullanıcı kayıt propertyleri oluşturduk. navigasyon modeli kullandık navigasyon ile yeni cs açtık rolle cs i
19)veritabanına kaydetme maplemek -notmapped kaydetme demek örneğin şifre tekrarını kaydetmez
20)her seyin bir classtan yapılmasına fluent api denir 
21)database notation id yi elle girerken olusacak hataları engeller
22)user x = new user() x bir user, user bir tür
23)DEPENDENCY INJECTION
private readonly CarRentalDBContext _context;
        //dep inj. bunun faydası bizim contextimiz ile databasein contexti üretirlir. ve bundan sonra surekli database değil bizim contextimiz ile iş görür.
        //hız için önemlidir. en genel db contextte kullanılır. en yogun kullanılan oldugu icin. insanları bekletmemek için
        //çok sık kullanılan dosyalarda çok fazla kullanıcı istekte bulunduğu zaman  kullanıcıları sıraya sokmamak adına bekleme sürelerini azaltmak adına kullanılır
        public HesapController(CarRentalDBContext context)
        {
            _context = context;
        }
_context tüm database işlemlerini bilen ve controllerlarda kullanılabilen
24)hesap controller oluşturduk kayıt giris metodları
25)ASENKRON ÇALIŞMA
public async Task< IActionResult> Kayit([Bind("UserID", "Emaill", "Passwordd", "PasswordRepeatt", "FullName", "Surname","MobileNO")] Userr userr)
        {
            if (ModelState.IsValid)
            {
                await _context.Userrs.AddAsync(userr); //user classına ekledi //userr girilen kullanıcı
                                                       //memoryde db set türündeki usera ekledik
                await _context.SaveChangesAsync(); //şimdi database e gitti
                                                   //asenkron çalışma verimli olarak tüm çekirdekleri kullanma multijob
                return RedirectToAction("Giris","Hesap");
            }
            return View(userr); //form yeniden döndüğünde içerikler silinmeden gelsin
            //task async işlemciye async görevi veriyor 
            //await bekletmektir
        }
26)HTMLDE INDEX E VALUE VERME KULLANICI TARAFINDAN GİRİLEN DEĞERİ DATADA TUTMA
public IActionResult Kayit()
        {
            Userr userr = new Userr(); //html kısmında value ya model verdiğimiz için error vermemesi için boş user döndürdük
            return View(userr);
        }
27)CLASSTAKİ ERRORLARI GÖSTERMEK İÇİN HTML E
@model Userr
//model userr kullanıcının az önceki girdiği bilgiler buraya data olarak geldi
<!DOCTYPE html>
<div asp-validation-summary="All" class="text-danger"></div>
28)ÜYELİK TİPİ ROLEEID 1 OLUR KENDİ ÜYE OLAN HERKES PASİF KULLANICI
public async Task< IActionResult> Kayit([Bind("UserID", "Emaill", "Passwordd", "PasswordRepeatt", "FullName", "Surname","MobileNO","RoleeID")] Userr userr)
        {
            userr.RoleeID = 1;
28)login ve kayıt işlemleri tamam şimdi authentication kimlik doğrulama işlemleri authorization yetki işlemleri
authentication ve authorization 
29)        [Authorize(Roles="PasifKullanıcı")]
        public IActionResult AktivasyonBilgilendirmesi()
        {
            return View();
        }

yalnızca burada authorize olması önemli
bu kısma anonimler giremeyecek sadece pasifler girecek
bad request ise kullanıcının
30)middleware sitenin heryerinde kullanılacak ara katman
program.cslerde yazılır, program.cs izinlerden oluşur
31)aktif pasif admin kullanıcılarını dbcontextte tanımladık
32)adminanasayfacontrollera authorize koşulu ekledik sadece amin












































































